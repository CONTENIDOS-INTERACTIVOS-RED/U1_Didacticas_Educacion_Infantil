{"remainingRequest":"/home/runner/work/U1_Didacticas_Educacion_Infantil/U1_Didacticas_Educacion_Infantil/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Didacticas_Educacion_Infantil/U1_Didacticas_Educacion_Infantil/src/views/curso/Tema3.vue?vue&type=template&id=4b633902&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Didacticas_Educacion_Infantil/U1_Didacticas_Educacion_Infantil/src/views/curso/Tema3.vue","mtime":1746329519992},{"path":"/home/runner/work/U1_Didacticas_Educacion_Infantil/U1_Didacticas_Educacion_Infantil/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Didacticas_Educacion_Infantil/U1_Didacticas_Educacion_Infantil/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Didacticas_Educacion_Infantil/U1_Didacticas_Educacion_Infantil/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Didacticas_Educacion_Infantil/U1_Didacticas_Educacion_Infantil/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Didacticas_Educacion_Infantil/U1_Didacticas_Educacion_Infantil/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}